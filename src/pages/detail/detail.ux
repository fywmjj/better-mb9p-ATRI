<template>
  <!-- Root container -->
  <div class="page-container" @swipe="handleSwipeBack">

    <!-- Dialogue Layer -->
    <div class="dialogue-layer" @click="nextDialogue">
      <!-- 背景图的加载路径，之前是直接在common下找，现在统一挪到images子目录了，管理起来更规范。 -->
      <image class="dialogue-background" src="/common/images/{{ currentBackground }}"></image>
      <!-- 场景图片也是一样，路径调整到images目录。 -->
      <image class="scene-image" src="/common/images/{{ gameData.scenes[currentScene].Img }}" style="top:{{gameData.scenes[currentScene].ImgTop}}px; left:{{gameData.scenes[currentScene].ImgLeft}}px;" if="{{ showSceneImage }}"></image>
      <div class="dialogue-ui" if="{{ showDialogueUI }}">
        <!-- 对话框背景图，路径也更新了。 -->
        <image class="dialogue-text-bg" src="/common/images/text_bg.png"></image>
        <!-- 角色名显示，这里之前有点小问题，位置可能不太对劲，现在应该能正常显示在对话框上方了。 -->
        <text class="dialogue-character">{{ characterName }}</text>
        <scroll scroll-y="true" bounces="true" class="dialogue-scroll" id="dialogueScroll">
          <text class="dialogue-text" style="font-size: {{ settings.textSize }}px;">{{ displayedText }}</text>
        </scroll>
      </div>
    </div>

    <!-- Choices Overlay -->
    <!-- Use overlay for positioning context -->
    <div class="overlay choices-overlay" if="{{ showChoicesUI }}">
        <!-- 分支选择按钮列表。之前这里的注释写在了<text>标签里面，导致编译出错，按钮无法正常显示和点击。现在把注释挪出来了，应该就没问题了。😅 -->
        <!-- Position buttons absolutely within the overlay -->
        <text
            class="choice-button"
            for="{{ (index, choice) in gameData.scenes[currentScene].choices }}"
            style="top: {{ 100 + index * 85 }}px; left: 43px;"
            @click="selectChoice(index)">
            {{ choice.text }}
        </text>
    </div>

    <!-- Menu Overlay -->
    <div class="overlay menu-overlay" if="{{ isMenuVisible }}">
      <!-- Standard Menu Buttons -->
      <text class="menu-button" @click="toRecoveryPage(1)">保存</text> <!-- 1 = Save -->
      <text class="menu-button" @click="toRecoveryPage(2)">加载</text> <!-- 2 = Load -->
      <!-- Quick Save/Load Buttons -->
      <text class="menu-button quick-save-button" @click="quickSave()">快速存档</text>
      <text class="menu-button" @click="quickLoad()">快速读档</text>
      <!-- Other Buttons -->
      <text class="menu-button" @click="skipScene()">跳过场景</text>
      <text class="menu-button" @click="skipCurrentChapter()">跳过章节</text>
      <text class="menu-button" @click="closeMenu()">返回</text>
      <text class="menu-button" @click="goToHomePage()">返回主页</text>
    </div>

    <!-- Save Overlay -->
    <div class="overlay save-load-overlay" if="{{ recoveryMode === 1 }}">
      <scroll scroll-y="true" bounces="true" class="save-load-scroll">
        <text class="save-load-title">长按删除，点击覆盖 (第1个为快存)</text> <!-- Indicate quick save slot -->
        <text class="save-load-slot {{ $idx === 0 ? 'quick-save-slot' : '' }}" for="{{ (index, slot) in recoveryData }}" @click="saveRecoveryData(index)" @longpress="deleteRecoveryData(index)">存档 {{ index + 1 }}</text>
        <text class="save-load-slot save-load-new" @click="saveRecoveryData('new')">+</text>
      </scroll>
       <text class="save-load-close-button" @click="closeRecoveryOverlay">关闭</text>
    </div>

    <!-- Load Overlay -->
    <div class="overlay save-load-overlay" if="{{ recoveryMode === 2 }}">
      <scroll scroll-y="true" bounces="true" class="save-load-scroll">
        <text class="save-load-title">点击读取存档 (第1个为快存)</text> <!-- Indicate quick save slot -->
        <text class="save-load-slot {{ $idx === 0 ? 'quick-save-slot' : '' }}" for="{{ (index, slot) in recoveryData }}" @click="loadRecoveryData(index)">存档 {{ index + 1 }}</text>
         <text class="save-load-empty" if="{{!recoveryData || recoveryData.length === 0}}">还没有存档哦</text>
      </scroll>
       <text class="save-load-close-button" @click="closeRecoveryOverlay">关闭</text>
    </div>

    <!-- End Game Overlay -->
    <div class="overlay end-game-overlay" if="{{ achievedEnding }}">
      <text class="end-game-title">达成结局：</text>
      <text class="end-game-name">{{ achievedEnding }}</text>
      <text class="end-game-back" @click="goToHomePage">返回主页</text>
    </div>
  </div>
</template>

<style>
  /* === Base & Dialogue Styles === */
  .page-container { width: 336px; height: 480px; position: relative; background-color: #000000; overflow: hidden; }
  .dialogue-layer { width: 100%; height: 100%; position: relative; background-color: #000000; }
  .dialogue-background { width: 100%; height: 100%; object-fit: cover; }
  .scene-image { position: absolute; }
  .dialogue-ui { position: absolute; bottom: 0; left: 0; width: 100%; height: 165px; }
  .dialogue-text-bg { position: absolute; bottom: 0; left: 0; width: 100%; height: 165px; }
  /* 角色名显示位置调了下，之前有点偏下，现在应该更舒服了。这块UI真是细节活儿啊~ */
  .dialogue-character { position: absolute; bottom: 130px; left: 20px; font-size: 28px; color: #ffffff; font-weight: bold; }
  /* 对话文本的滚动区域也做了调整，给角色名留出足够的空间。 */
  .dialogue-scroll { position: absolute; bottom: 10px; left: 8px; right: 8px; height: 115px; overflow: hidden; flex-wrap: wrap; }
  .dialogue-text { color: #ffffff; font-weight: bold; width: 100%; text-align: left; }

  /* === Overlay Base === */
  .overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; background-color: rgba(0, 0, 0, 0.5); flex-direction: column; }

  /* === Choices Overlay & Button === */
  /* 分支选择的遮罩层，之前这里多加了个position: relative;导致它没法铺满全屏，按钮位置就跑偏了。现在移除了，应该能正常覆盖并居中显示了。 */
  .choices-overlay {
    background-color: transparent;
    /* Keep justification/alignment defaults (center) or adjust if needed */
    /* justify-content: flex-start; */
    /* align-items: flex-start; */
    /* position: relative; */ /* Needed for absolute positioning of children */
  }
  .choice-button {
    position: absolute; /* Position relative to overlay */
    width: 250px;
    height: 61px; /* Adjust height? */
    /* Recalculate left for centering: (container_width - element_width) / 2 */
    left: 43px; /* (336 - 250) / 2 = 43 */
    /* Top is calculated inline */
    background-color: rgba(80, 192, 231, 0.85); /* Slightly more opaque */
    color: #ffffff;
    font-size: 22px; /* Slightly smaller if needed */
    font-weight: bold;
    text-align: center;
    padding: 8px;  /* Adjusted padding */
    display: flex; /* Use flex to center text vertically & horizontally */
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    /* margin-bottom removed as top is absolute */
  }

  /* === Menu Overlay & Buttons === */
  .menu-overlay { background-color: rgba(255, 255, 255, 0.95); padding-top: 15px; padding-bottom: 15px; /* Add vertical padding */}
  .menu-button {
    width: 230px; /* Slightly narrower */
    height: 50px; /* Slightly shorter */
    background-color: rgba(80, 192, 231, 0.8);
    color: #ffffff;
    font-size: 22px; /* Smaller font */
    font-weight: bold;
    text-align: center;
    margin-bottom: 12px; /* Reduced margin */
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    flex-shrink: 0; /* Prevent shrinking in flex column */
  }
  .quick-save-button { /* Optional different style for quick save */
      background-color: rgba(100, 210, 100, 0.8); /* Greenish */
  }

  /* === Save/Load Overlay === */
  .save-load-overlay { background-color: rgba(255, 255, 255, 0.95); justify-content: flex-start; padding: 15px; }
  .save-load-scroll { width: 100%; height: 82%; /* Adjusted height */ display: flex; flex-direction: column; align-items: center; margin-bottom: 5px; }
  .save-load-title { font-size: 18px; /* Smaller title */ color: #333333; margin-bottom: 15px; font-weight: bold; flex-shrink: 0; text-align: center; }
  .save-load-slot { width: 95%; max-width: 280px; height: 50px; background-color: rgba(80, 192, 231, 0.7); color: #ffffff; font-size: 20px; font-weight: bold; text-align: center; margin-bottom: 12px; display: flex; justify-content: center; align-items: center; border-radius: 8px; flex-shrink: 0; }
  .quick-save-slot { border: 2px solid #ffd700; /* Highlight quick save slot */ }
  .save-load-new { font-size: 30px; background-color: rgba(100, 210, 100, 0.8); }
  .save-load-empty { margin-top: 20px; font-size: 18px; color: #888888; flex-shrink: 0; }
  .save-load-close-button { font-size: 18px; color: #007aff; padding: 8px; margin-top: auto; flex-shrink: 0; }

  /* === End Game Overlay === */
  .end-game-overlay { background-color: rgba(255, 255, 255, 0.95); }
  .end-game-title { font-size: 28px; color: #333333; margin-bottom: 10px; }
  .end-game-name { font-size: 32px; color: #000000; font-weight: bold; margin-bottom: 40px; text-align: center; }
  .end-game-back { font-size: 24px; color: #007aff; padding: 10px; }
</style>

<script>
  import router from '@system.router';
  import storage from '@system.storage';
  import prompt from '@system.prompt';
  import file from '@system.file';

  const STORAGE_KEYS = { RECOVERY_DATA: 'recoveryData', SETTINGS: 'settings', FIN_STATUS: 'fin' };
  const DEFAULT_BG = 'bg.png';
  const ENDING_TYPES = { HE: "Happy Ending", BE: "Bad Ending" };
  const RECOVERY_MODE_NONE = 0; const RECOVERY_MODE_SAVE = 1; const RECOVERY_MODE_LOAD = 2;
  const QUICK_SAVE_SLOT_INDEX = 0; // Use slot 0 for quick save/load

  export default {
    private: {
      // State...
      gameData: { scenes: [], }, chapter: 0, currentScene: 0, currentDialogue: 0, choicesMade: [],
      chapterList: ['b999','b101','b102','b103','b111','b112','b113','b114','b121','b122','b123','b124','b200','b201','b202','b203','b204','b205','b206','b207','b301','b302','b303','b304','b401','b402','b403','b404','b405','b406','b407','b501','b601','b701'],
      currentBackground: DEFAULT_BG, characterName: '', displayedText: '',
      isMenuVisible: false, recoveryMode: RECOVERY_MODE_NONE, achievedEnding: '',
      fullDialogueText: '', typingIndex: 0, typingTimeoutId: null, canProgress: true,
      settings: { textSpeed: 40, textSize: 22 }, recoveryData: [],
      loadOnInitData: null, isDataLoading: true,
    },
    computed: {
        showSceneImage() { return !this.isDataLoading && this.gameData.scenes && this.gameData.scenes.length > this.currentScene && this.gameData.scenes[this.currentScene]?.Img !== undefined; },
        showDialogueUI() { if (this.isDataLoading || !this.gameData.scenes || this.gameData.scenes.length <= this.currentScene) return false; const scene = this.gameData.scenes[this.currentScene]; return this.currentBackground !== DEFAULT_BG && !scene?.choices; },
        showChoicesUI() { if (this.isDataLoading || !this.gameData.scenes || this.gameData.scenes.length <= this.currentScene) return false; const scene = this.gameData.scenes[this.currentScene]; const hasChoices = !!scene?.choices && scene.choices.length > 0; return hasChoices; }
    },

    onInit() {
        this.isDataLoading = true; console.log("[Detail] onInit");
        if (this.load) { this.loadOnInitData = this.load; } else { this.loadOnInitData = { type: 'chapter', index: 0 }; }
        this.loadSettingsAndRecovery().then(() => { this.startGameFromInitData(); this.isDataLoading = false; })
            .catch(err => { console.error("[Detail] Init load fail:", err); this.isDataLoading = false; });
    },
    onDestroy() { this.clearTypingTimeout(); },

    // --- 数据加载器：加载设置和存档数据 ---
    loadSettingsAndRecovery() {
        return new Promise((resolve, reject) => {
            let settingsLoaded = false; let recoveryLoaded = false;
            const check = () => { if (settingsLoaded && recoveryLoaded) resolve(); };
            storage.get({ key: STORAGE_KEYS.SETTINGS,
                success: (d) => { let s={}; if(d){try{s=JSON.parse(d);}catch(e){}} this.settings={...this.private.settings,...s}; console.log("[Detail] Settings loaded");},
                fail: (d,c) => { console.warn(`[Detail] Load settings fail: ${d}, ${c}`);},
                complete: () => { settingsLoaded = true; check(); } });
            storage.get({ key: STORAGE_KEYS.RECOVERY_DATA,
                success: (d) => { if(d){try{this.recoveryData=JSON.parse(d);}catch(e){this.recoveryData=[];}}else{this.recoveryData=[];} console.log(`[Detail] Recovery loaded: ${this.recoveryData.length}`);},
                fail: (d,c) => { console.warn(`[Detail] Load recovery fail: ${d}, ${c}`); this.recoveryData = []; },
                complete: () => { recoveryLoaded = true; check(); } });
        });
    },

    // --- 游戏初始化 / 重置状态 ---
    startGameFromInitData() {
        console.log("[Detail] startGameFromInitData:", JSON.stringify(this.loadOnInitData)); if (!this.loadOnInitData) return; this.resetGameState();
        const { type, index } = this.loadOnInitData;
        if (type === 'load' && index !== undefined && this.recoveryData[index]) { this.loadGameFromState(this.recoveryData[index]); }
        else if (type === 'TE') { this.chapter = 'TE'; this.loadChapterData(33); } else if (type === 'BE') { this.chapter = 'BE'; this.loadChapterData(32); }
        else if (type === 'chapter') { const chapterIndex = index !== undefined ? index : 0; this.chapter = chapterIndex; this.loadChapterData(this.chapter); }
        else { console.warn("[Detail] Unknown load type", this.loadOnInitData); this.chapter = 0; this.loadChapterData(0); }
    },
    resetGameState(preserveIndices = false) {
        console.log("[Detail] Resetting game state.", preserveIndices);
        this.isMenuVisible = false; this.recoveryMode = RECOVERY_MODE_NONE; this.achievedEnding = ''; this.clearTypingTimeout();
        if (!preserveIndices) { this.currentScene = 0; this.currentDialogue = 0; this.choicesMade = []; }
    },

     // --- 章节/场景加载逻辑 ---
     loadChapterData(chapterId) {
         console.log(`[Detail] Request load chapter: ${chapterId}`); let index = -1; let special = false;
         if (chapterId === 'BE') { this.chapter = 'BE'; index = 32; special = true; } else if (chapterId === 'TE') { this.chapter = 'TE'; index = 33; special = true; }
         else if (typeof chapterId === 'number') { this.chapter = chapterId; index = chapterId; special = false; }
         else { console.error(`[Detail] Invalid chapter ID: ${chapterId}`); index = 0; this.chapter = 0; }
         console.log(`[Detail] Effective load: Chapter='${this.chapter}', Index=${index}, Special=${special}`); this.loadChapterDataInternal(index);
     },
     loadChapterDataInternal(index) {
         if (typeof index !== 'number' || index < 0 || index >= this.chapterList.length) { console.error(`[Detail] Internal invalid index ${index}`); if(index !== 0) { this.loadChapterDataInternal(0); } else { router.back(); } return; }
         const filename = this.chapterList[index];
         // Vela 系统的 `JSON.parse` 编译出来之后放真机上只解析 `.txt`，认都不认 `.json`...
         // 我敢说开发 Vela 快应用编译器的老哥绝对没干过全栈，甚至前端都没怎么干过，你猜它为什么不叫 `TXT.parse`？🤷‍♀️
         const uri = `/common/content/${filename}.txt`; // 之前是.json，现在改成.txt才能在真机上跑起来。
         console.log(`[Detail] Reading: ${uri}`);
         this.gameData.scenes = []; this.choicesMade = []; // Reset here
         console.log(`[Detail] Indices before file read: ${this.currentScene}/${this.currentDialogue}`);
         file.readText({ uri: uri,
             success: (d) => { if (d && d.text) { try { this.gameData.scenes = JSON.parse(d.text); console.log(`[Detail] Parsed ${filename}: ${this.gameData.scenes.length} scenes.`); this.applyCurrentSceneState(); } catch (e) { console.error(`[Detail] Parse fail ${uri}:`, e); router.back(); } } else { console.error(`[Detail] Empty file: ${uri}`); router.back(); } },
             fail: (d, c) => { console.error(`[Detail] Read fail ${uri}: ${d}, ${c}`); router.back(); },
             complete: () => { console.log(`[Detail] File read complete ${uri}`); }
         });
     },
    applyCurrentSceneState() {
        console.log(`[Detail] Applying state: S=${this.currentScene}, D=${this.currentDialogue}`);
        if (this.currentScene < 0 || this.currentScene >= this.gameData.scenes.length) { console.error(`[Detail] Invalid Scene ${this.currentScene}, resetting.`); this.currentScene = 0; this.currentDialogue = 0; }
        const scene = this.gameData.scenes[this.currentScene]; if (scene && scene.dialogues && (this.currentDialogue < 0 || this.currentDialogue >= scene.dialogues.length)) { console.warn(`[Detail] Invalid Dialogue ${this.currentDialogue}, resetting.`); this.currentDialogue = 0; }
        this.loadScene(this.currentScene);
    },

    // --- 场景/对话推进逻辑 ---
    loadScene(sceneIndex) {
        console.log(`[Detail] --- Loading Scene Index: ${sceneIndex} ---`); this.clearTypingTimeout();
        if (!this.gameData?.scenes || sceneIndex < 0 || sceneIndex >= this.gameData.scenes.length) { console.error(`[Detail] loadScene invalid index ${sceneIndex}`); this.handleChapterEnd(); return; }
        this.currentScene = sceneIndex; const scene = this.gameData.scenes[this.currentScene]; console.log(`[Detail] Scene ${sceneIndex} Data: ${JSON.stringify(scene)}`);
        if (!scene) { console.error("[Detail] Scene null."); this.handleChapterEnd(); return; }
        this.currentBackground = scene.background || DEFAULT_BG;
        if (scene.choices?.length > 0) { console.log(`[Detail] Scene ${sceneIndex}: Choices.`); this.characterName = ''; this.displayedText = ''; this.canProgress = false; }
        else if (scene.dialogues?.length > 0) { console.log(`[Detail] Scene ${sceneIndex}: Dialogues. Loading ${this.currentDialogue}.`); if (this.currentDialogue < 0 || this.currentDialogue >= scene.dialogues.length) { this.currentDialogue = 0; } this.loadDialogue(scene.dialogues[this.currentDialogue]); }
        else { console.log(`[Detail] Scene ${sceneIndex}: Empty. Proceeding.`); this.handleDialogueEnd(); }
    },
    loadDialogue(dialogue) {
        if (!dialogue) { console.error("[Detail] loadDialogue: null."); this.handleDialogueEnd(); return; } console.log(`[Detail] Loading dialogue: '${(dialogue.text || "").substring(0,20)}...'`);
        if(this.showDialogueUI) { this.scrollToTop(); } this.clearTypingTimeout(); this.characterName = dialogue.character || '';
        this.fullDialogueText = dialogue.text || ''; this.displayedText = ''; this.typingIndex = 0; this.canProgress = false; this.startTypingEffect();
    },
    startTypingEffect() {
        if (this.isMenuVisible || this.recoveryMode !== RECOVERY_MODE_NONE || this.achievedEnding || this.showChoicesUI) { this.clearTypingTimeout(); return; } if (this.typingIndex < this.fullDialogueText.length) { this.displayedText += this.fullDialogueText.charAt(this.typingIndex); this.typingIndex++; this.typingTimeoutId = setTimeout(() => { this.startTypingEffect(); }, this.settings.textSpeed); } else { this.canProgress = true; this.typingTimeoutId = null; }
    },

    // --- 玩家操作与游戏流程控制 ---
    nextDialogue() {
        console.log(`[Detail] nextDialogue clicked. Progress=${this.canProgress}`); if (this.isMenuVisible || this.recoveryMode !== RECOVERY_MODE_NONE || this.achievedEnding || this.showChoicesUI) { return; }
        if (!this.canProgress && this.typingTimeoutId) { this.clearTypingTimeout(); this.displayedText = this.fullDialogueText; this.canProgress = true; return; }
        if (this.canProgress) { const scene = this.gameData?.scenes?.[this.currentScene]; if (!scene?.dialogues || this.currentDialogue >= scene.dialogues.length - 1) { this.handleDialogueEnd(); } else { this.currentDialogue++; this.loadDialogue(scene.dialogues[this.currentDialogue]); } }
    },
    handleDialogueEnd() {
        console.log(`[Detail] handleDialogueEnd: S=${this.currentScene}, D=${this.currentDialogue}`); const scene = this.gameData?.scenes?.[this.currentScene];
        const source = scene?.dialogues?.[this.currentDialogue] || scene; if (!source) { this.handleSceneEnd(); return; }
        if (source.END !== undefined) { this.triggerEnding(source.END); } else if (source.branch !== undefined) { this.evaluateBranch(source.branch); }
        else if (source.toScenes !== undefined) { const jump = parseInt(source.toScenes, 10); if (!isNaN(jump)) { this.currentDialogue = 0; this.loadScene(this.currentScene + jump); } else { this.handleSceneEnd(); } }
        else { this.handleSceneEnd(); }
    },
    handleSceneEnd() {
        console.log(`[Detail] handleSceneEnd: S=${this.currentScene}`); if (!this.gameData?.scenes) { this.goToHomePage(); return; }
        if (this.currentScene < this.gameData.scenes.length - 1) { this.currentDialogue = 0; this.loadScene(this.currentScene + 1); } else { this.handleChapterEnd(); }
    },
    handleChapterEnd() {
        console.log(`[Detail] handleChapterEnd: Ch=${this.chapter}`); this.currentBackground = DEFAULT_BG; this.characterName=''; this.displayedText=''; this.canProgress=false;
        let nextIndex = -1; if (typeof this.chapter === 'number') { nextIndex = this.chapter + 1; } else { setTimeout(() => this.goToHomePage(), 1500); return; }
        if (nextIndex >= 0 && nextIndex < this.chapterList.length) { console.log(`[Detail] Loading next Ch index: ${nextIndex}`); this.currentScene=0; this.currentDialogue=0; this.choicesMade=[]; setTimeout(() => this.loadChapterData(nextIndex), 1500); }
        else { console.log("[Detail] Game end."); setTimeout(() => this.goToHomePage(), 1500); }
    },
    evaluateBranch(branchData) {
        console.log("[Detail] Evaluating branch:", branchData); if (!branchData || !branchData.choices || branchData.toChapter === undefined) { this.handleSceneEnd(); return; } const match = JSON.stringify(this.choicesMade) === JSON.stringify(branchData.choices);
        let target = match ? branchData.toChapter : branchData.elseChapter; if (target === undefined && !match) { this.handleSceneEnd(); return; }
        this.currentScene=0; this.currentDialogue=0; this.choicesMade=[]; this.loadChapterData(target);
    },
    selectChoice(index) {
        const scene = this.gameData?.scenes?.[this.currentScene]; if (!scene?.choices?.[index]) { return; } const choice = scene.choices[index]; console.log(`[Detail] Choice ${index}: '${choice.text}'`); this.choicesMade.push(index);
        const offset = choice.nextScene; if (typeof offset !== 'number') { this.handleSceneEnd(); return; } this.currentDialogue = 0; this.loadScene(this.currentScene + offset);
    },

    // --- 菜单与遮罩层控制 ---
    handleSwipeBack(event) {
       // 右滑呼出菜单的逻辑，这里做了个小优化，确保在特定状态下才能呼出，避免误触。用户体验嘛，得考虑周全。
       if (event.direction === 'right' && !this.isMenuVisible && this.recoveryMode === RECOVERY_MODE_NONE && !this.achievedEnding && !this.showChoicesUI && this.canProgress && !this.isDataLoading ) { this.isMenuVisible = true; this.clearTypingTimeout(); this.canProgress = false; }
    },
    closeMenu() {
       this.isMenuVisible = false; this.canProgress = !this.showChoicesUI && !this.achievedEnding && !this.isDataLoading;
    },
    goToHomePage() { router.replace({ uri: "/pages/index" }); },
    toRecoveryPage(mode) {
        console.log(`[Detail] Opening Recovery: Mode=${mode}`); if (mode === RECOVERY_MODE_LOAD && (!this.recoveryData || this.recoveryData.length === 0)) { prompt.showToast({ message: "没有存档" }); return; }
        this.recoveryMode = mode; this.isMenuVisible = false;
    },
    closeRecoveryOverlay() {
        console.log("[Detail] Closing Recovery Overlay."); this.recoveryMode = RECOVERY_MODE_NONE; this.isMenuVisible = true; this.canProgress = false;
    },

    // === 快速存档 / 读档功能 ===
    quickSave() {
        console.log("[Detail] Action: Quick Save");
        if (this.isDataLoading || this.achievedEnding) { prompt.showToast({message: "当前无法快速存档"}); return; }

        const currentState = { chapter: this.chapter, currentScene: this.currentScene, currentDialogue: this.currentDialogue, choicesMade: [...this.choicesMade], timestamp: new Date().toISOString() };

        // 确保 recoveryData 是一个数组，不然会报错。
        if (!Array.isArray(this.recoveryData)) { this.recoveryData = []; }

        // 覆盖或添加到槽位0，这个是快速存档的专属位置。
        this.recoveryData[QUICK_SAVE_SLOT_INDEX] = currentState;
        this.persistRecoveryData(); // 保存整个存档列表
        prompt.showToast({ message: "快速存档成功 (存档 1)" });
        this.closeMenu(); // 快速操作后自动关闭菜单，方便玩家继续游戏。
    },

    quickLoad() {
        console.log("[Detail] Action: Quick Load");
        if (!this.recoveryData || this.recoveryData.length <= QUICK_SAVE_SLOT_INDEX || !this.recoveryData[QUICK_SAVE_SLOT_INDEX]) {
             prompt.showToast({ message: "没有快速存档可读" });
             return;
        }
        if (this.isDataLoading || this.achievedEnding) { prompt.showToast({message: "当前无法快速读档"}); return; }

        const saveData = this.recoveryData[QUICK_SAVE_SLOT_INDEX];
        prompt.showToast({ message: "读取快速存档..." });
        this.isMenuVisible = false; // 确保菜单关闭
        this.recoveryMode = RECOVERY_MODE_NONE; // 确保存档/读档界面关闭
        this.loadGameFromState(saveData); // 加载存档数据
    },
    // === 快速存档 / 读档功能结束 ===

    // --- 常规存档/读档/删除逻辑 ---
    saveRecoveryData(indexOrNew) {
        console.log(`[Detail] saveRecoveryData: Target=${indexOrNew}`); const state = { chapter: this.chapter, currentScene: this.currentScene, currentDialogue: this.currentDialogue, choicesMade: [...this.choicesMade], timestamp: new Date().toISOString() };
        if (indexOrNew === 'new') { if (this.recoveryData.length >= 10) { prompt.showToast({ message: '存档已满' }); return; } this.recoveryData.push(state); prompt.showToast({ message: '保存成功' }); }
        else if (typeof indexOrNew === 'number' && indexOrNew >= 0 && indexOrNew < this.recoveryData.length) { this.recoveryData[indexOrNew] = state; prompt.showToast({ message: '覆盖成功' }); }
        else { prompt.showToast({ message: '保存失败' }); return; } this.persistRecoveryData(); this.closeRecoveryOverlay();
    },
    deleteRecoveryData(index) {
        prompt.showDialog({ title: '确认删除', message: `确定要删除存档 ${index + 1} 吗？`, buttons: [{ text: '取消'}, { text: '删除', color: '#DD2C00' }],
            success: (d) => { if (d.index === 1) { if (index >= 0 && index < this.recoveryData.length) { this.recoveryData.splice(index, 1); this.persistRecoveryData(); prompt.showToast({ message: '删除成功' }); } else { prompt.showToast({ message: '删除失败' }); } } else { prompt.showToast({ message: '已取消' }); } },
            fail: (err) => { prompt.showToast({ message: '操作失败' }); console.error("Delete Dialog fail:", err); }, complete: () => {} });
    },
    loadRecoveryData(index) {
        console.log(`[Detail] Request load idx: ${index}`); if (index >= 0 && index < this.recoveryData.length) { const saveData = this.recoveryData[index]; prompt.showToast({ message: `读取存档 ${index + 1}...` }); this.recoveryMode = RECOVERY_MODE_NONE; this.isMenuVisible = false; this.loadGameFromState(saveData); } else { prompt.showToast({ message: '无效存档' }); }
    },
    loadGameFromState(stateData) {
        if (!stateData) return; console.log("[Detail] Loading state:", JSON.stringify(stateData)); this.isDataLoading = true; this.clearTypingTimeout(); this.resetGameState(true);
        this.chapter = stateData.chapter; this.currentScene = stateData.currentScene; this.currentDialogue = stateData.currentDialogue; this.choicesMade = stateData.choicesMade ? [...stateData.choicesMade] : [];
        console.log(`[Detail] State restored: Ch=${this.chapter}`); this.loadChapterData(this.chapter);
        setTimeout(() => { this.isDataLoading = false; this.canProgress = !this.showChoicesUI && !this.achievedEnding && !this.isMenuVisible; console.log(`[Detail] Load complete. Progress=${this.canProgress}`); }, 200);
    },
    persistRecoveryData() {
        console.log("[Detail] Persisting recovery..."); try { const v = JSON.stringify(this.recoveryData); storage.set({ key: STORAGE_KEYS.RECOVERY_DATA, value: v, success: () => { console.log("[Detail] Recovery saved."); }, fail: (d, c) => { console.error(`Save recovery fail:${d},${c}`); prompt.showToast({ message: `存档列表保存失败` }); }, complete: () => {} }); } catch (e) { console.error("Stringify recovery fail:", e); prompt.showToast({ message: '存档数据异常' }); }
    },

    // --- 跳过 / 结局 / 工具函数 ---
    skipScene() {
        console.log("[Detail] Skip Scene action"); if (this.isDataLoading || this.showChoicesUI || this.achievedEnding) { prompt.showToast({ message: '当前无法跳过' }); this.closeMenu(); return; } const scene = this.gameData?.scenes?.[this.currentScene]; const lastDialogue = scene?.dialogues?.slice(-1)?.[0]; const skippable = !( scene?.choices || lastDialogue?.END || lastDialogue?.branch || lastDialogue?.toScenes ); const lastScene = this.currentScene >= (this.gameData?.scenes?.length || 0) - 1; if (skippable && !lastScene) { prompt.showToast({ message: "跳过场景" }); this.closeMenu(); this.clearTypingTimeout(); this.currentDialogue = 0; this.loadScene (this.currentScene + 1); } else { prompt.showToast({ message: '无法跳过此场景' }); this.closeMenu(); }
    },
    skipCurrentChapter() {
         console.log("[Detail] Skip Chapter action"); if (this.isDataLoading || this.achievedEnding) { prompt.showToast({ message: '当前无法跳过' }); this.closeMenu(); return; } const noSkip = [2, 19, 25, 26]; const endings = ['TE', 'BE']; const lastNum = 31; const cant = noSkip.includes(this.chapter) || endings.includes(this.chapter) || (typeof this.chapter === 'number' && this.chapter >= lastNum); if (cant) { prompt.showToast({ message: '此章节无法跳过' }); this.closeMenu(); } else if (typeof this.chapter === 'number') { prompt.showToast({ message: "跳过章节..." }); this.closeMenu(); this.clearTypingTimeout(); this.handleChapterEnd(); } else { this.closeMenu(); }
     },
     triggerEnding(endingName) {
         if (this.achievedEnding) return; console.log(`[Detail] Trigger Ending: ${endingName}`); this.achievedEnding = endingName; this.updateFinStatus(endingName); this.canProgress = false; this.clearTypingTimeout(); this.isMenuVisible = false; this.recoveryMode = RECOVERY_MODE_NONE; prompt.showToast({message: `达成结局：${endingName}`})
     },
     updateFinStatus(endingName) {
         storage.get({ key: STORAGE_KEYS.FIN_STATUS, success: (d) => { let s = { HE: false, BE: false, ...(d ? JSON.parse(d) : {}) }; if (endingName === ENDING_TYPES.HE) s.HE = true; else if (endingName === ENDING_TYPES.BE) s.BE = true; storage.set({ key: STORAGE_KEYS.FIN_STATUS, value: JSON.stringify(s), success: () => {}, fail: ()=>{}, complete: () => {} }); }, fail: ()=>{}, complete: () => {} });
     },
    clearTypingTimeout() { if (this.typingTimeoutId) { clearTimeout(this.typingTimeoutId); this.typingTimeoutId = null; } },
    scrollToTop() { try { this.$element('dialogueScroll')?.scrollTo({ y: 0, smooth: false }); } catch (e) {} },
  }
</script>
