<template>
  <div class="page-container">
    <!-- Background Image -->
    <!-- 背景图的路径也统一调整到images子目录了。 -->
    <image class="bg-image" src="/common/images/bg.png"></image>

    <!-- True Ending Overlay Image -->
    <!-- 真结局的图片路径也挪到images目录了。 -->
    <image class="true-end-visual" src="/common/images/ATRI_TrueEnding.png" if="{{ showTrueEndVisuals }}"></image>

    <!-- Main Menu Buttons Container -->
    <div class="main-menu-button-container"> <!-- Changed class name -->
      <text class="main-menu-button true-end-button" if="{{ showTrueEndVisuals }}" @click="loadGame('TE')">TRUE END</text>
      <text class="main-menu-button" @click="startGame()">START</text>
      <text class="main-menu-button {{ hasSaveData ? '' : 'disabled' }}" @click="showLoadOverlay()">LOAD</text>
      <text class="main-menu-button" @click="showSettingsOverlay()">SYSTEM</text>
      <text class="main-menu-button" @click="exitApp()">EXIT</text>
    </div>

    <!-- Load Overlay -->
    <div class="overlay load-overlay" if="{{ isLoadOverlayVisible }}">
       <scroll scroll-y="true" bounces="true" class="overlay-scroll">
          <text class="overlay-title">点击读取存档</text>
          <text class="save-slot-button" for="{{ (index, slot) in recoveryData }}" @click="loadGame(index)">存档 {{ index + 1 }}</text>
           <text class="save-load-empty" if="{{ !hasSaveData }}">没有可用的存档</text>
          <text class="close-button" @click="hideLoadOverlay">关闭</text>
       </scroll>
    </div>

    <!-- Settings Overlay -->
    <div class="overlay settings-overlay" if="{{ isSettingsOverlayVisible }}">
        <!-- 设置界面的背景图，路径也更新了。 -->
        <image class="settings-bg-image" src="/common/images/ev000b.png"></image>
        <!-- 设置界面的文本背景图，也更新了路径。 -->
        <image class="settings-text-bg" src="/common/images/text_bg.png"></image>
        <div class="settings-controls-wrapper">
            <div class="settings-controls">
                <div class="settings-top-buttons">
                    <text class="settings-action-text" @click="saveSettingsAndClose()">保存并退出</text>
                    <text class="settings-action-text" @click="hideSettingsOverlay()">直接退出</text>
                </div>
                <div class="setting-item">
                    <text class="setting-label">显示速度 ({{ tempSettings.textSpeed }})：</text>
                    <slider class="setting-slider" min="20" max="60" step="1" value="{{ tempSettings.textSpeed }}" @change="updateTempSetting('textSpeed', $event)"></slider>
                </div>
                <div class="setting-item">
                    <text class="setting-label">文字大小 ({{ tempSettings.textSize }})：</text>
                     <slider class="setting-slider" min="20" max="32" step="1" value="{{ tempSettings.textSize }}" @change="updateTempSetting('textSize', $event)"></slider>
                </div>
            </div>
            <scroll scroll-y="true" bounces="true" class="settings-preview-scroll">
                <text class="settings-preview-text" style="font-size: {{ tempSettings.textSize }}px;">{{ textPreviewContent }}</text>
            </scroll>
        </div>
    </div>

    <!-- Tips Overlay -->
    <div class="overlay tips-overlay" if="{{ isTipsOverlayVisible }}">
        <div class="tips-content">
            <text class="tips-text title">提示与信息</text>
            <text class="tips-text small">在"SYSTEM"中调整显示速度和文字大小。</text>
            <text class="tips-text small">游戏中右滑进入菜单。</text>
            <text class="tips-text warning">请勿反复点击START！耐心等待加载。</text>
            <text class="tips-text separator"></text>
            <text class="tips-text small">制作：@liuyuze61</text>
            <text class="tips-text small">感谢：@Wxz226，@TLE</text>
            <text class="tips-text separator"></text>
            <text class="tips-text confirm-button" @click="hideTipsOverlay()">我知道了</text>
        </div>
    </div>
  </div>
</template>

<style>
  /* Base Styles */
  .page-container { width: 336px; height: 480px; position: relative; background-color: #000000; overflow: hidden; }
  .bg-image { width: 100%; height: 100%; object-fit: cover; }
  .true-end-visual { position: absolute; top: 0; left: 0; width: 100%; height: auto; opacity: 0.8; }

  /* === Main Menu Button Styles === */
  .main-menu-button-container { position: absolute; top: 215px; /* Slightly adjusted */ left: 35px; /* Slightly adjusted */ display: flex; flex-direction: column; align-items: flex-start; }
  .main-menu-button {
    font-size: 30px; /* Reduced size */
    font-weight: bold;
    color: #0A55BC;
    padding: 3px 0; /* Reduced padding */
    margin-bottom: 12px; /* Adjusted spacing */
  }
  .true-end-button { color: #FFD700; }
  .main-menu-button.disabled { color: #aaaaaa; }

  /* === Overlay Base Styles === */
  .overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(255, 255, 255, 0.95); display: flex; flex-direction: column; align-items: center; justify-content: center; overflow: hidden; }

  /* Load Overlay */
  .load-overlay { padding: 20px; justify-content: flex-start; }
  .overlay-scroll { width: 100%; flex-grow: 1; display: flex; flex-direction: column; align-items: center; /* Requires <scroll> component for actual scrolling */ }
  .overlay-title { font-size: 22px; color: #333333; font-weight: bold; margin-bottom: 20px; margin-top: 10px; }
  .save-slot-button { width: 90%; max-width: 280px; height: 55px; background-color: rgba(80, 192, 231, 0.8); color: #ffffff; font-size: 24px; font-weight: bold; text-align: center; margin-bottom: 15px; display: flex; justify-content: center; align-items: center; border-radius: 8px; flex-shrink: 0; }
  .save-load-empty { margin-top: 20px; font-size: 18px; color: #888888; }
  .close-button { margin-top: auto; padding: 10px 20px; font-size: 20px; color: #007aff; } /* No underline */

  /* Settings Overlay */
  /* 设置界面样式调整，之前它会跑到右边去，现在应该能正常全屏显示了。这个定位问题可把我折腾坏了，差点以为是Vela的bug呢。😂 */
  .settings-overlay { padding: 0; justify-content: flex-start; position: relative; }
  .settings-bg-image { position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover;}
  .settings-text-bg { position: absolute; bottom: 0; left: 0; width: 100%; height: 165px; }
  /* 确保这个容器的尺寸计算是正确的，避免内容溢出导致滚动条出现。 */
  .settings-controls-wrapper { width: 100%; height: 100%; position: relative; display: flex; flex-direction: column; box-sizing: border-box; }
  /* 控制面板也加上box-sizing，防止padding导致宽度溢出。 */
  .settings-controls { width: 100%; padding: 20px; background-color: rgba(0, 0, 0, 0.4); display: flex; flex-direction: column; flex-shrink: 0; margin-bottom: 155px; box-sizing: border-box; }
  .settings-top-buttons { display: flex; justify-content: space-around; width: 100%; margin-bottom: 35px; }
  .settings-action-text { font-size: 22px; color: #ffffff; font-weight: bold; padding: 5px; }
  .setting-item { width: 100%; margin-bottom: 30px; display: flex; flex-direction: column; align-items: center; }
  .setting-label { font-size: 20px; color: #ffffff; font-weight: bold; margin-bottom: 15px; text-align: center; }
  .setting-slider { width: 90%; max-width: 250px; }
  .settings-preview-scroll { position: absolute; bottom: 0; left: 0; width: 100%; height: 155px; padding: 5px 8px; }
  .settings-preview-text { color: #ffffff; font-weight: bold; width: 100%; text-align: left; }

  /* Tips Overlay */
  .tips-overlay { background-color: rgba(255, 255, 255, 0.98); padding: 20px; }
  .tips-content { display: flex; flex-direction: column; align-items: center; text-align: center; max-width: 300px; }
  .tips-text { font-size: 20px; color: #333333; margin-bottom: 12px; }
  .tips-text.title { font-size: 24px; font-weight: bold; margin-bottom: 20px; color: #000000; }
  .tips-text.small { font-size: 18px; color: #555555; }
  .tips-text.warning { color: #DD2C00; font-weight: bold; }
  .tips-text.separator { color: #cccccc; margin: 10px 0 20px 0; width: 80%; height: 1px; background-color: #cccccc;}
  .confirm-button { font-size: 22px; color: #007aff; font-weight: bold; margin-top: 20px; padding: 10px; }
</style>

<script>
  import router from "@system.router";
  import storage from '@system.storage';
  import prompt from '@system.prompt';

  const STORAGE_KEYS = { RECOVERY_DATA: 'recoveryData', SETTINGS: 'settings', TIPS_SHOWN: 'tips', FIN_STATUS: 'fin' };
  const TIPS_SEEN_FLAG = 61;
  const DEFAULT_SETTINGS = { textSpeed: 40, textSize: 22 };

  export default {
    private: {
      recoveryData: [], settings: { ...DEFAULT_SETTINGS }, finStatus: { HE: false, BE: false },
      isLoadOverlayVisible: false, isSettingsOverlayVisible: false, isTipsOverlayVisible: false,
      tempSettings: { ...DEFAULT_SETTINGS }, textPreviewContent: '', textPreviewIndex: 0, textPreviewTimerId: null,
      textPreviewText: `Atri -My Dear Moments-\n文字显示样本，用于预览文本速度和大小。\nSample text for previewing speed and size.`,
    },
    computed: {
        showTrueEndVisuals() { return this.finStatus && this.finStatus.HE === true && this.finStatus.BE === true; },
        hasSaveData() { return this.recoveryData && this.recoveryData.length > 0; }
    },

    onInit() {
      // 应用启动时的初始化流程，加载各种数据。这块逻辑比较复杂，得确保每一步都稳妥，不然启动就崩了可不好。👍
      console.log("[Index] onInit: Loading initial data.");
      this.loadSettings().then(() => this.loadRecoveryData())
                     .then(() => this.loadFinStatus())
                     .then(() => this.checkIfTipsNeeded())
                     .catch(err => { console.error("[Index] Load chain error:", err); this.checkIfTipsNeeded(); });
    },
    onHide() { this.stopTextPreviewAnimation(); },

    // --- 数据加载器 ---
    loadSettings() { return new Promise((resolve) => {
        storage.get({ key: STORAGE_KEYS.SETTINGS,
            success: (d) => { let s = {}; if (d) { try { s = JSON.parse(d); } catch (e) {} } this.settings = { ...DEFAULT_SETTINGS, ...s }; this.tempSettings = { ...this.settings }; resolve(); },
            fail: (d,c) => { console.warn(`[Index] Load settings fail: ${d}, ${c}`); this.settings = { ...DEFAULT_SETTINGS }; this.tempSettings = { ...this.settings }; resolve(); }
        });
    }); },
    loadRecoveryData() { return new Promise((resolve) => {
        storage.get({ key: STORAGE_KEYS.RECOVERY_DATA,
            success: (d) => { if (d) { try { this.recoveryData = JSON.parse(d); } catch (e) { this.recoveryData = []; } } else { this.recoveryData = []; } resolve(); },
            fail: (d,c) => { console.warn(`[Index] Load recovery fail: ${d}, ${c}`); this.recoveryData = []; resolve(); }
        });
    }); },
     loadFinStatus() { return new Promise((resolve) => {
        storage.get({ key: STORAGE_KEYS.FIN_STATUS,
            success: (d) => { const ds = { HE: false, BE: false }; let s = {}; if (d) { try { s = JSON.parse(d); } catch (e) {} } this.finStatus = { ...ds, ...s }; resolve(); },
            fail: (d,c) => { console.warn(`[Index] Load fin fail: ${d}, ${c}`); this.finStatus = { HE: false, BE: false }; resolve(); }
        });
    }); },
     checkIfTipsNeeded() { storage.get({ key: STORAGE_KEYS.TIPS_SHOWN,
         success: (d) => { let flag = null; if (d) { try { flag = JSON.parse(d); } catch (e) {} } if (flag !== TIPS_SEEN_FLAG) { setTimeout(() => { this.isTipsOverlayVisible = true; }, 0); } else { this.isTipsOverlayVisible = false; } },
         fail: (d,c) => { console.warn(`[Index] Check tips fail: ${d}, ${c}`); setTimeout(() => { this.isTipsOverlayVisible = true; }, 0); },
         complete: () => {} });
     },

    // --- 导航与操作 ---
    startGame() {
      // 开始游戏按钮的点击事件，跳转到游戏详情页。加了个加载提示，避免用户一直点，毕竟加载需要时间嘛。
      router.push({ uri: 'pages/detail' }); prompt.showToast({ message: "加载游戏中..." });
    },
    loadGame(indexOrType) {
        let loadParam;
         if (typeof indexOrType === 'number') { if (indexOrType >= 0 && indexOrType < this.recoveryData.length) { loadParam = { type: 'load', index: indexOrType }; prompt.showToast({ message: `读取存档 ${indexOrType + 1}...` }); } else { prompt.showToast({ message: "无效存档" }); return; } }
         else if (indexOrType === 'TE') { loadParam = { type: 'TE' }; prompt.showToast({ message: "加载路线..." }); } else { prompt.showToast({ message: "无效类型" }); return; }
         this.hideLoadOverlay(); router.push({ uri: `pages/detail`, params: { load: loadParam } });
    },
    exitApp() { try { this.$app.exit(); } catch(e) { prompt.showToast({ message: "无法退出" }); } },

    // --- 遮罩层控制 ---
    showLoadOverlay() { if (this.hasSaveData) { this.isLoadOverlayVisible = true; } else { prompt.showToast({message: "没有存档"}); } },
    hideLoadOverlay() { this.isLoadOverlayVisible = false; },

    showSettingsOverlay() {
        console.log("[Index] showSettingsOverlay called.");
        this.tempSettings = { ...this.settings }; // Reset temp on open
        this.isSettingsOverlayVisible = true; // Set the flag
        console.log(`[Index] isSettingsOverlayVisible set to: ${this.isSettingsOverlayVisible}`);
        // Use $nextTick (if fails use setTimeout 0) to ensure DOM is ready for animation
        this.$nextTick(() => {
             console.log(`[Index] Starting animation in nextTick. Visible state: ${this.isSettingsOverlayVisible}`);
             if (this.isSettingsOverlayVisible) { // Double check flag before starting
                 this.startTextPreviewAnimation();
             }
        });
         // setTimeout(() => {
         //     console.log(`[Index] Starting animation in setTimeout. Visible state: ${this.isSettingsOverlayVisible}`);
         //     if (this.isSettingsOverlayVisible) { this.startTextPreviewAnimation();}
         //  }, 0);
    },
    hideSettingsOverlay() { this.isSettingsOverlayVisible = false; this.stopTextPreviewAnimation(); },
    hideTipsOverlay() { this.isTipsOverlayVisible = false; storage.set({ key: STORAGE_KEYS.TIPS_SHOWN, value: JSON.stringify(TIPS_SEEN_FLAG), success: () => {}, fail: () => {}, complete: () => {} }); },

    // --- 设置逻辑 ---
    updateTempSetting(key, event) {
      let newValue = event.progress; // Assume progress
      if (typeof newValue !== 'number' && typeof event.value === 'number') { newValue = event.value; } // Fallback
      console.log(`[Index] updateTempSetting: key=${key}, value=${newValue}`); // Keep log
      if (typeof newValue === 'number' && (key === 'textSpeed' || key === 'textSize')) {
          if (key === 'textSpeed') newValue = Math.max(20, Math.min(60, Math.round(newValue)));
          if (key === 'textSize') newValue = Math.max(20, Math.min(32, Math.round(newValue)));
          this.tempSettings[key] = newValue;
          if (key === 'textSpeed') { this.startTextPreviewAnimation();}
      } else { console.warn(`[Index] Invalid slider value/key.`); }
    },
    saveSettingsAndClose() {
        // 保存设置并关闭界面，确保用户配置能持久化。希望这次别再有保存失败的问题了，不然用户要骂娘了。😤
        this.settings = { ...this.tempSettings };
        try { const s = JSON.stringify(this.settings); storage.set({ key: STORAGE_KEYS.SETTINGS, value: s,
                success: () => { prompt.showToast({ message: '设置已保存' }); this.hideSettingsOverlay(); },
                fail: (d, c) => { prompt.showToast({ message: `保存失败` }); console.error(`Save setting fail: ${d}, ${c}`)},
                complete: () => {} });
        } catch (e) { prompt.showToast({ message: '设置数据异常' }); console.error("Stringify settings fail:", e); }
    },

    // --- 文本预览动画 ---
    startTextPreviewAnimation() { this.stopTextPreviewAnimation(); if (this.isSettingsOverlayVisible) { this.textPreviewContent = ''; this.textPreviewIndex = 0; this.animateTextPreview(); } },
    stopTextPreviewAnimation() { if (this.textPreviewTimerId) { clearTimeout(this.textPreviewTimerId); this.textPreviewTimerId = null; } },
    animateTextPreview() {
      // 文本预览动画的逻辑，修复了一个拼写错误（isSettingsÖverlayVisible -> isSettingsOverlayVisible），导致预览文本不显示。这种低级错误，下次一定注意！🤦‍♀️
      if (!this.isSettingsOverlayVisible || this.textPreviewTimerId === null) { return; }
      if (this.textPreviewIndex < this.textPreviewText.length) { this.textPreviewContent += this.textPreviewText.charAt(this.textPreviewIndex); this.textPreviewIndex++; this.textPreviewTimerId = setTimeout(() => { this.animateTextPreview(); }, this.tempSettings.textSpeed); }
      else { this.textPreviewTimerId = setTimeout(() => { if (this.isSettingsOverlayVisible) { this.textPreviewIndex = 0; this.startTextPreviewAnimation(); } }, 2000); }
    },
  }
</script>
