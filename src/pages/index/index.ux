<template>
  <div class="page-container">
    <!-- Background Image -->
    <!-- 背景图的路径也统一调整到images子目录了。 -->
    <image class="bg-image" src="/common/images/bg.png"></image>

    <!-- True Ending Overlay Image -->
    <!-- 真结局的图片路径也挪到images目录了。 -->
    <image class="true-end-visual" src="/common/images/ATRI_TrueEnding.png" if="{{ showTrueEndVisuals }}"></image>

    <!-- Main Menu Buttons Container -->
    <div class="main-menu-button-container"> <!-- Changed class name -->
      <text class="main-menu-button true-end-button" if="{{ showTrueEndVisuals }}" @click="loadGame('TE')">TRUE END</text>
      <text class="main-menu-button" @click="startGame()">START</text>
      <text class="main-menu-button {{ hasSaveData ? '' : 'disabled' }}" @click="showLoadOverlay()">LOAD</text>
      <text class="main-menu-button" @click="showSettingsOverlay()">SYSTEM</text>
      <text class="main-menu-button" @click="exitApp()">EXIT</text>
    </div>

    <!-- Load Overlay -->
    <div class="overlay load-overlay" if="{{ isLoadOverlayVisible }}">
       <scroll scroll-y="true" bounces="true" class="overlay-scroll">
          <text class="overlay-title">点击读取存档</text>
          <text class="save-slot-button" for="{{ (index, slot) in recoveryData }}" @click="loadGame(index)">存档 {{ index + 1 }}</text>
           <text class="save-load-empty" if="{{ !hasSaveData }}">没有可用的存档</text>
          <text class="close-button" @click="hideLoadOverlay">关闭</text>
       </scroll>
    </div>

    <!-- Tips Overlay -->
    <div class="overlay tips-overlay" if="{{ isTipsOverlayVisible }}">
        <div class="tips-content">
            <text class="tips-text title">提示与信息</text>
            <text class="tips-text small">在"SYSTEM"中调整显示速度和文字大小。</text>
            <text class="tips-text small">游戏中右滑进入菜单。</text>
            <text class="tips-text warning">请勿反复点击START！耐心等待加载。</text>
            <text class="tips-text separator"></text>
            <text class="tips-text small">制作：@liuyuze61</text>
            <text class="tips-text small">感谢：@Wxz226，@TLE</text>
            <text class="tips-text separator"></text>
            <text class="tips-text confirm-button" @click="hideTipsOverlay()">我知道了</text>
        </div>
    </div>
  </div>
</template>

<style>
  /* Base Styles */
  .page-container { width: 336px; height: 480px; position: relative; background-color: #000000; overflow: hidden; }
  .bg-image { width: 100%; height: 100%; object-fit: cover; }
  .true-end-visual { position: absolute; top: 0; left: 0; width: 100%; height: auto; opacity: 0.8; }

  /* === Main Menu Button Styles === */
  .main-menu-button-container { position: absolute; top: 215px; /* Slightly adjusted */ left: 35px; /* Slightly adjusted */ display: flex; flex-direction: column; align-items: flex-start; }
  .main-menu-button {
    font-size: 30px; /* Reduced size */
    font-weight: bold;
    color: #0A55BC;
    padding: 3px 0; /* Reduced padding */
    margin-bottom: 12px; /* Adjusted spacing */
  }
  .true-end-button { color: #FFD700; }
  .main-menu-button.disabled { color: #aaaaaa; }

  /* === Overlay Base Styles === */
  .overlay { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(255, 255, 255, 0.95); display: flex; flex-direction: column; align-items: center; justify-content: center; overflow: hidden; }

  /* Load Overlay */
  .load-overlay { padding: 20px; justify-content: flex-start; }
  .overlay-scroll { width: 100%; flex-grow: 1; display: flex; flex-direction: column; align-items: center; /* Requires <scroll> component for actual scrolling */ }
  .overlay-title { font-size: 22px; color: #333333; font-weight: bold; margin-bottom: 20px; margin-top: 10px; }
  .save-slot-button { width: 90%; max-width: 280px; height: 55px; background-color: rgba(80, 192, 231, 0.8); color: #ffffff; font-size: 24px; font-weight: bold; text-align: center; margin-bottom: 15px; display: flex; justify-content: center; align-items: center; border-radius: 8px; flex-shrink: 0; }
  .save-load-empty { margin-top: 20px; font-size: 18px; color: #888888; }
  .close-button { margin-top: auto; padding: 10px 20px; font-size: 20px; color: #007aff; } /* No underline */

  /* Tips Overlay */
  .tips-overlay { background-color: rgba(255, 255, 255, 0.98); padding: 20px; }
  .tips-content { display: flex; flex-direction: column; align-items: center; text-align: center; max-width: 300px; }
  .tips-text { font-size: 20px; color: #333333; margin-bottom: 12px; }
  .tips-text.title { font-size: 24px; font-weight: bold; margin-bottom: 20px; color: #000000; }
  .tips-text.small { font-size: 18px; color: #555555; }
  .tips-text.warning { color: #DD2C00; font-weight: bold; }
  .tips-text.separator { color: #cccccc; margin: 10px 0 20px 0; width: 80%; height: 1px; background-color: #cccccc;}
  .confirm-button { font-size: 22px; color: #007aff; font-weight: bold; margin-top: 20px; padding: 10px; }
</style>

<script>
  import router from "@system.router";
  import storage from '@system.storage';
  import prompt from '@system.prompt';

  const STORAGE_KEYS = { RECOVERY_DATA: 'recoveryData', TIPS_SHOWN: 'tips', FIN_STATUS: 'fin' };
  const TIPS_SEEN_FLAG = 61;

  export default {
    private: {
      recoveryData: [], finStatus: { HE: false, BE: false },
      isLoadOverlayVisible: false, isTipsOverlayVisible: false,
    },
    computed: {
        showTrueEndVisuals() { return this.finStatus && this.finStatus.HE === true && this.finStatus.BE === true; },
        hasSaveData() { return this.recoveryData && this.recoveryData.length > 0; }
    },

    onInit() {
      // 应用启动时的初始化流程，加载各种数据。这块逻辑比较复杂，得确保每一步都稳妥，不然启动就崩了可不好。👍
      console.log("[Index] onInit: Loading initial data.");
      // 移除了settings的加载，因为现在设置页面独立了，它自己负责加载。
      this.loadRecoveryData()
          .then(() => this.loadFinStatus())
          .then(() => this.checkIfTipsNeeded())
          .catch(err => { console.error("[Index] Load chain error:", err); this.checkIfTipsNeeded(); });
    },
    // onHide 生命周期钩子不再需要，因为文本预览动画已移至独立设置页面。

    // --- 数据加载器 ---
    // loadSettings 方法已移至新的设置页面。
    loadRecoveryData() { return new Promise((resolve) => {
        storage.get({ key: STORAGE_KEYS.RECOVERY_DATA,
            success: (d) => { if (d) { try { this.recoveryData = JSON.parse(d); } catch (e) { this.recoveryData = []; } } else { this.recoveryData = []; } resolve(); },
            fail: (d,c) => { console.warn(`[Index] Load recovery fail: ${d}, ${c}`); this.recoveryData = []; resolve(); }
        });
    }); },
     loadFinStatus() { return new Promise((resolve) => {
        storage.get({ key: STORAGE_KEYS.FIN_STATUS,
            success: (d) => { const ds = { HE: false, BE: false }; let s = {}; if (d) { try { s = JSON.parse(d); } catch (e) {} } this.finStatus = { ...ds, ...s }; resolve(); },
            fail: (d,c) => { console.warn(`[Index] Load fin fail: ${d}, ${c}`); this.finStatus = { HE: false, BE: false }; resolve(); }
        });
    }); },
     checkIfTipsNeeded() { storage.get({ key: STORAGE_KEYS.TIPS_SHOWN,
         success: (d) => { let flag = null; if (d) { try { flag = JSON.parse(d); } catch (e) {} } if (flag !== TIPS_SEEN_FLAG) { setTimeout(() => { this.isTipsOverlayVisible = true; }, 0); } else { this.isTipsOverlayVisible = false; } },
         fail: (d,c) => { console.warn(`[Index] Check tips fail: ${d}, ${c}`); setTimeout(() => { this.isTipsOverlayVisible = true; }, 0); },
         complete: () => {} });
     },

    // --- 导航与操作 ---
    startGame() {
      // 开始游戏按钮的点击事件，跳转到游戏详情页。加了个加载提示，避免用户一直点，毕竟加载需要时间嘛。
      router.push({ uri: 'pages/detail' }); prompt.showToast({ message: "加载游戏中..." });
    },
    loadGame(indexOrType) {
        let loadParam;
         if (typeof indexOrType === 'number') { if (indexOrType >= 0 && indexOrType < this.recoveryData.length) { loadParam = { type: 'load', index: indexOrType }; prompt.showToast({ message: `读取存档 ${indexOrType + 1}...` }); } else { prompt.showToast({ message: "无效存档" }); return; } }
         else if (indexOrType === 'TE') { loadParam = { type: 'TE' }; prompt.showToast({ message: "加载路线..." }); } else { prompt.showToast({ message: "无效类型" }); return; }
         this.hideLoadOverlay(); router.push({ uri: `pages/detail`, params: { load: loadParam } });
    },
    exitApp() { try { this.$app.exit(); } catch(e) { prompt.showToast({ message: "无法退出" }); } },

    // --- 遮罩层控制 ---
    showLoadOverlay() { if (this.hasSaveData) { this.isLoadOverlayVisible = true; } else { prompt.showToast({message: "没有存档"}); } },
    hideLoadOverlay() { this.isLoadOverlayVisible = false; },

    showSettingsOverlay() {
        console.log("[Index] showSettingsOverlay called. Navigating to settings page.");
        // 以前这里是直接显示一个浮层，现在把设置功能独立成一个页面了。
        // 这样结构更清晰，也解决了之前定位的一些玄学问题。一举两得！🥳
        router.push({ uri: 'pages/settings' });
    },
    // hideSettingsOverlay 方法已移除，因为现在是页面跳转，而不是显示/隐藏浮层。
    hideTipsOverlay() { this.isTipsOverlayVisible = false; storage.set({ key: STORAGE_KEYS.TIPS_SHOWN, value: JSON.stringify(TIPS_SEEN_FLAG), success: () => {}, fail: () => {}, complete: () => {} }); },

    // --- 设置逻辑 (已移至 /pages/settings/settings.ux) ---
    // updateTempSetting, saveSettingsAndClose, startTextPreviewAnimation, stopTextPreviewAnimation, animateTextPreview 方法已移至新的设置页面。
  }
</script>
